trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: InstallNuGet
  jobs:
  - job: InstallNuGet
    displayName: Install NuGet
    steps:
    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '6.10.1'

- stage: Restore
  dependsOn: InstallNuGet
  jobs:
  - job: Restore
    displayName: Restore NuGet Packages
    steps:
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'select' # Adjust if you need to use specific feeds or the default feed

- stage: Build
  dependsOn: Restore
  jobs:
  - job: Build
    displayName: Build Solution
    steps:
    - script: |
        echo Cleaning solution...
        dotnet clean $(solution) --configuration $(buildConfiguration)
      displayName: 'Clean solution'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: PublishPipelineArtifact@1
      displayName: Publish Build Artifacts
      inputs:
        targetPath: '$(build.artifactStagingDirectory)'
        artifact: 'build-artifacts'
        publishLocation: 'pipeline'

- stage: Test
  dependsOn: Build
  jobs:
  - job: Test
    displayName: Run Tests
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download Build Artifacts
      inputs:
        artifact: 'build-artifacts'
        targetPath: '$(Pipeline.Workspace)'

    - task: VSTest@2
      displayName: Execute Tests
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*test*.dll
          !**\*TestAdapter.dll
          !**\obj\**
        searchFolder: '$(Pipeline.Workspace)'
        runTestsInIsolation: false
        codeCoverageEnabled: true
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- stage: Publish_Build_Artifacts
  dependsOn: Test
  jobs:
  - job: Publish_Build_Artifacts
    displayName: Publish Final Artifacts
    steps:
    - task: CopyFiles@2
      displayName: Copy Files
      inputs:
        SourceFolder: '$(Pipeline.Workspace)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'final-artifacts'
        publishLocation: 'pipeline'
